import React, { useState } from 'react';
import { motion } from 'framer-motion';
import {
  Cog6ToothIcon,
  KeyIcon,
  BellIcon,
  GlobeAltIcon,
  UserIcon,
  EyeIcon,
  EyeSlashIcon,
  CheckIcon,
} from '@heroicons/react/24/outline';

interface Settings {
  general: {
    companyName: string;
    timezone: string;
    language: string;
  };
  apiKeys: {
    gnewsApiKey: string;
    youtubeApiKey: string;
    openaiApiKey: string;
  };
  notifications: {
    emailNotifications: boolean;
    jobCompletionNotifications: boolean;
    errorNotifications: boolean;
    weeklyReports: boolean;
  };
  youtube: {
    autoPublish: boolean;
    defaultVisibility: string;
    channelId: string;
    description: string;
  };
  defaults: {
    videoDuration: number;
    voiceType: string;
    videoQuality: string;
  };
}

const Settings: React.FC = () => {
  const [settings, setSettings] = useState<Settings>({
    general: {
      companyName: 'AutoNews',
      timezone: 'UTC',
      language: 'en',
    },
    apiKeys: {
      gnewsApiKey: '',
      youtubeApiKey: '',
      openaiApiKey: '',
    },
    notifications: {
      emailNotifications: true,
      jobCompletionNotifications: true,
      errorNotifications: true,
      weeklyReports: false,
    },
    youtube: {
      autoPublish: false,
      defaultVisibility: 'public',
      channelId: '',
      description: 'Automated news video generated by AutoNews',
    },
    defaults: {
      videoDuration: 180,
      voiceType: 'female',
      videoQuality: '1080p',
    },
  });

  const [activeTab, setActiveTab] = useState<'general' | 'api' | 'notifications' | 'youtube' | 'defaults'>('general');
  const [showApiKeys, setShowApiKeys] = useState<Record<string, boolean>>({});
  const [saveStatus, setSaveStatus] = useState<'idle' | 'saving' | 'saved'>('idle');

  const handleSave = async () => {
    setSaveStatus('saving');
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1000));
    setSaveStatus('saved');
    setTimeout(() => setSaveStatus('idle'), 2000);
  };

  const toggleApiKeyVisibility = (key: string) => {
    setShowApiKeys(prev => ({ ...prev, [key]: !prev[key] }));
  };

  const maskApiKey = (key: string) => {
    if (!key) return '';
    return showApiKeys[key] ? key : 'â€¢'.repeat(key.length);
  };

  const tabs = [
    { id: 'general', name: 'General', icon: Cog6ToothIcon },
    { id: 'api', name: 'API Keys', icon: KeyIcon },
    { id: 'notifications', name: 'Notifications', icon: BellIcon },
    { id: 'youtube', name: 'YouTube', icon: GlobeAltIcon },
    { id: 'defaults', name: 'Defaults', icon: UserIcon },
  ];

  return (
    <div className="max-w-6xl mx-auto space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Settings</h1>
          <p className="mt-2 text-gray-600">
            Configure your AutoNews application preferences
          </p>
        </div>
        <button
          onClick={handleSave}
          disabled={saveStatus === 'saving'}
          className="btn btn-primary flex items-center space-x-2"
        >
          {saveStatus === 'saving' ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
              <span>Saving...</span>
            </>
          ) : saveStatus === 'saved' ? (
            <>
              <CheckIcon className="h-4 w-4" />
              <span>Saved</span>
            </>
          ) : (
            <span>Save Changes</span>
          )}
        </button>
      </div>

      <div className="flex flex-col lg:flex-row lg:space-x-8 space-y-6 lg:space-y-0">
        {/* Sidebar Navigation */}
        <div className="lg:w-64">
          <nav className="card p-0 overflow-hidden">
            <div className="space-y-1">
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id as typeof activeTab)}
                  className={`w-full flex items-center px-4 py-3 text-left text-sm font-medium transition-colors ${
                    activeTab === tab.id
                      ? 'bg-primary-50 text-primary-700 border-r-2 border-primary-500'
                      : 'text-gray-700 hover:bg-gray-50'
                  }`}
                >
                  <tab.icon className="mr-3 h-5 w-5" />
                  {tab.name}
                </button>
              ))}
            </div>
          </nav>
        </div>

        {/* Main Content */}
        <div className="flex-1">
          <motion.div
            key={activeTab}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
            className="card"
          >
            {activeTab === 'general' && (
              <div className="space-y-6">
                <h2 className="text-xl font-semibold text-gray-900">General Settings</h2>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Company Name
                    </label>
                    <input
                      type="text"
                      value={settings.general.companyName}
                      onChange={(e) => setSettings({
                        ...settings,
                        general: { ...settings.general, companyName: e.target.value }
                      })}
                      className="input"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Timezone
                    </label>
                    <select
                      value={settings.general.timezone}
                      onChange={(e) => setSettings({
                        ...settings,
                        general: { ...settings.general, timezone: e.target.value }
                      })}
                      className="input"
                    >
                      <option value="UTC">UTC</option>
                      <option value="America/New_York">Eastern Time</option>
                      <option value="America/Chicago">Central Time</option>
                      <option value="America/Denver">Mountain Time</option>
                      <option value="America/Los_Angeles">Pacific Time</option>
                      <option value="Europe/London">London</option>
                      <option value="Europe/Paris">Paris</option>
                      <option value="Asia/Tokyo">Tokyo</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Language
                    </label>
                    <select
                      value={settings.general.language}
                      onChange={(e) => setSettings({
                        ...settings,
                        general: { ...settings.general, language: e.target.value }
                      })}
                      className="input"
                    >
                      <option value="en">English</option>
                      <option value="es">Spanish</option>
                      <option value="fr">French</option>
                      <option value="de">German</option>
                      <option value="ja">Japanese</option>
                      <option value="zh">Chinese</option>
                    </select>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'api' && (
              <div className="space-y-6">
                <div>
                  <h2 className="text-xl font-semibold text-gray-900">API Keys</h2>
                  <p className="text-gray-600 mt-1">
                    Manage your API keys for external services
                  </p>
                </div>

                <div className="space-y-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      GNews API Key
                    </label>
                    <div className="relative">
                      <input
                        type={showApiKeys.gnews ? 'text' : 'password'}
                        value={settings.apiKeys.gnewsApiKey}
                        onChange={(e) => setSettings({
                          ...settings,
                          apiKeys: { ...settings.apiKeys, gnewsApiKey: e.target.value }
                        })}
                        placeholder="Enter your GNews API key"
                        className="input pr-10"
                      />
                      <button
                        type="button"
                        onClick={() => toggleApiKeyVisibility('gnews')}
                        className="absolute inset-y-0 right-0 pr-3 flex items-center"
                      >
                        {showApiKeys.gnews ? (
                          <EyeSlashIcon className="h-4 w-4 text-gray-400" />
                        ) : (
                          <EyeIcon className="h-4 w-4 text-gray-400" />
                        )}
                      </button>
                    </div>
                    <p className="text-xs text-gray-500 mt-1">
                      Get your API key from <a href="https://gnews.io" target="_blank" rel="noopener noreferrer" className="text-primary-600 hover:text-primary-700">gnews.io</a>
                    </p>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      YouTube Data API Key
                    </label>
                    <div className="relative">
                      <input
                        type={showApiKeys.youtube ? 'text' : 'password'}
                        value={settings.apiKeys.youtubeApiKey}
                        onChange={(e) => setSettings({
                          ...settings,
                          apiKeys: { ...settings.apiKeys, youtubeApiKey: e.target.value }
                        })}
                        placeholder="Enter your YouTube API key"
                        className="input pr-10"
                      />
                      <button
                        type="button"
                        onClick={() => toggleApiKeyVisibility('youtube')}
                        className="absolute inset-y-0 right-0 pr-3 flex items-center"
                      >
                        {showApiKeys.youtube ? (
                          <EyeSlashIcon className="h-4 w-4 text-gray-400" />
                        ) : (
                          <EyeIcon className="h-4 w-4 text-gray-400" />
                        )}
                      </button>
                    </div>
                    <p className="text-xs text-gray-500 mt-1">
                      Get your API key from <a href="https://developers.google.com/youtube/v3" target="_blank" rel="noopener noreferrer" className="text-primary-600 hover:text-primary-700">Google Cloud Console</a>
                    </p>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      OpenAI API Key (Optional)
                    </label>
                    <div className="relative">
                      <input
                        type={showApiKeys.openai ? 'text' : 'password'}
                        value={settings.apiKeys.openaiApiKey}
                        onChange={(e) => setSettings({
                          ...settings,
                          apiKeys: { ...settings.apiKeys, openaiApiKey: e.target.value }
                        })}
                        placeholder="Enter your OpenAI API key"
                        className="input pr-10"
                      />
                      <button
                        type="button"
                        onClick={() => toggleApiKeyVisibility('openai')}
                        className="absolute inset-y-0 right-0 pr-3 flex items-center"
                      >
                        {showApiKeys.openai ? (
                          <EyeSlashIcon className="h-4 w-4 text-gray-400" />
                        ) : (
                          <EyeIcon className="h-4 w-4 text-gray-400" />
                        )}
                      </button>
                    </div>
                    <p className="text-xs text-gray-500 mt-1">
                      For enhanced content generation. Get your key from <a href="https://platform.openai.com" target="_blank" rel="noopener noreferrer" className="text-primary-600 hover:text-primary-700">OpenAI Platform</a>
                    </p>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'notifications' && (
              <div className="space-y-6">
                <h2 className="text-xl font-semibold text-gray-900">Notification Preferences</h2>

                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-sm font-medium text-gray-900">Email Notifications</h3>
                      <p className="text-sm text-gray-500">Receive email notifications for important events</p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings.notifications.emailNotifications}
                        onChange={(e) => setSettings({
                          ...settings,
                          notifications: { ...settings.notifications, emailNotifications: e.target.checked }
                        })}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-600"></div>
                    </label>
                  </div>

                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-sm font-medium text-gray-900">Job Completion</h3>
                      <p className="text-sm text-gray-500">Get notified when jobs complete successfully</p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings.notifications.jobCompletionNotifications}
                        onChange={(e) => setSettings({
                          ...settings,
                          notifications: { ...settings.notifications, jobCompletionNotifications: e.target.checked }
                        })}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-600"></div>
                    </label>
                  </div>

                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-sm font-medium text-gray-900">Error Alerts</h3>
                      <p className="text-sm text-gray-500">Get notified immediately when jobs fail</p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings.notifications.errorNotifications}
                        onChange={(e) => setSettings({
                          ...settings,
                          notifications: { ...settings.notifications, errorNotifications: e.target.checked }
                        })}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-600"></div>
                    </label>
                  </div>

                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-sm font-medium text-gray-900">Weekly Reports</h3>
                      <p className="text-sm text-gray-500">Receive weekly summary reports</p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings.notifications.weeklyReports}
                        onChange={(e) => setSettings({
                          ...settings,
                          notifications: { ...settings.notifications, weeklyReports: e.target.checked }
                        })}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-600"></div>
                    </label>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'youtube' && (
              <div className="space-y-6">
                <h2 className="text-xl font-semibold text-gray-900">YouTube Integration</h2>

                <div className="space-y-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-sm font-medium text-gray-900">Auto-publish to YouTube</h3>
                      <p className="text-sm text-gray-500">Automatically upload completed videos to YouTube</p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings.youtube.autoPublish}
                        onChange={(e) => setSettings({
                          ...settings,
                          youtube: { ...settings.youtube, autoPublish: e.target.checked }
                        })}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-primary-600"></div>
                    </label>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Default Video Visibility
                    </label>
                    <select
                      value={settings.youtube.defaultVisibility}
                      onChange={(e) => setSettings({
                        ...settings,
                        youtube: { ...settings.youtube, defaultVisibility: e.target.value }
                      })}
                      className="input max-w-xs"
                    >
                      <option value="private">Private</option>
                      <option value="unlisted">Unlisted</option>
                      <option value="public">Public</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      YouTube Channel ID
                    </label>
                    <input
                      type="text"
                      value={settings.youtube.channelId}
                      onChange={(e) => setSettings({
                        ...settings,
                        youtube: { ...settings.youtube, channelId: e.target.value }
                      })}
                      placeholder="UCxxxxxxxxxxxxxxxxxxxxxxxx"
                      className="input"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Default Description Template
                    </label>
                    <textarea
                      value={settings.youtube.description}
                      onChange={(e) => setSettings({
                        ...settings,
                        youtube: { ...settings.youtube, description: e.target.value }
                      })}
                      rows={4}
                      className="input"
                      placeholder="Default description for uploaded videos..."
                    />
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'defaults' && (
              <div className="space-y-6">
                <h2 className="text-xl font-semibold text-gray-900">Default Job Settings</h2>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Default Video Duration (seconds)
                    </label>
                    <input
                      type="number"
                      min="60"
                      max="600"
                      value={settings.defaults.videoDuration}
                      onChange={(e) => setSettings({
                        ...settings,
                        defaults: { ...settings.defaults, videoDuration: parseInt(e.target.value) }
                      })}
                      className="input"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Default Voice Type
                    </label>
                    <select
                      value={settings.defaults.voiceType}
                      onChange={(e) => setSettings({
                        ...settings,
                        defaults: { ...settings.defaults, voiceType: e.target.value }
                      })}
                      className="input"
                    >
                      <option value="female">Female Voice</option>
                      <option value="male">Male Voice</option>
                      <option value="british-female">British Female</option>
                      <option value="british-male">British Male</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Video Quality
                    </label>
                    <select
                      value={settings.defaults.videoQuality}
                      onChange={(e) => setSettings({
                        ...settings,
                        defaults: { ...settings.defaults, videoQuality: e.target.value }
                      })}
                      className="input"
                    >
                      <option value="720p">720p HD</option>
                      <option value="1080p">1080p Full HD</option>
                      <option value="1440p">1440p 2K</option>
                      <option value="2160p">2160p 4K</option>
                    </select>
                  </div>
                </div>
              </div>
            )}
          </motion.div>
        </div>
      </div>
    </div>
  );
};

export default Settings;